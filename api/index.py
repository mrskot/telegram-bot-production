from http.server import BaseHTTPRequestHandler
import json
import logging
import os
import requests
import time
from lib.telegram import TelegramService
from lib.ocr import OCRService
from lib.deepseek import DeepSeekService
from lib.bitrix import BitrixService

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
telegram = TelegramService()
ocr = OCRService()
deepseek = DeepSeekService()
bitrix = BitrixService()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
temp_data_store = {}

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """Health check"""
        if self.path == '/health' or self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "healthy", 
                "service": "telegram-bot",
                "platform": "vercel",
                "bot_token_set": bool(os.getenv('BOT_TOKEN'))
            }
            self.wfile.write(json.dumps(response).encode())
            return
        
        self.send_response(404)
        self.end_headers()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            logging.info(f"üì® Received Telegram update")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in update:
                self.handle_message(update['message'])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ (–∫–Ω–æ–ø–æ–∫)
            elif 'callback_query' in update:
                self.handle_callback(update['callback_query'])
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK Telegram
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {"status": "ok", "message": "processed"}
            self.wfile.write(json.dumps(response).encode())
            
        except Exception as e:
            logging.error(f"‚ùå Error: {e}")
            self.send_response(200)
            self.end_headers()
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message['chat']['id']
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–ï–ö–°–¢–ê
        if 'text' in message:
            text = message.get('text', '')
            logging.info(f"üí¨ Text from {chat_id}: {text}")
            
            if text.startswith('/'):
                self.handle_command(chat_id, text)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                editing_key = f"editing_{chat_id}"
                if editing_key in temp_data_store:
                    self.handle_field_edit(chat_id, text, editing_key)
                else:
                    response_text = "ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ üì∏"
                    telegram.send_message(chat_id, response_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–û–¢–û
        elif 'photo' in message:
            self.handle_photo(chat_id, message)
    
    def handle_command(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if text == '/start':
            welcome_text = (
                "üè≠ –ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Ä—à—Ä—É—Ç–Ω—ã–º –∫–∞—Ä—Ç–∞–º\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã, –∏ —è:\n"
                "1. üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ\n"
                "2. ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ\n" 
                "3. ‚úÖ –ü—Ä–µ–¥–ª–æ–∂—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                "4. üìù –°–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24"
            )
            telegram.send_message(chat_id, welcome_text)
    
    def handle_photo(self, chat_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –∫–∞—Ä—Ç"""
        try:
            logging.info(f"üì∏ Photo from {chat_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            telegram.send_message(chat_id, "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo = message['photo'][-1]
            file_id = photo['file_id']
            image_bytes = telegram.download_file(file_id)
            
            if not image_bytes:
                telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
                return
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            telegram.send_message(chat_id, "üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
            ocr_text = ocr.extract_text_from_bytes(image_bytes)
            
            if not ocr_text:
                telegram.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ")
                return
            
            logging.info(f"üìÑ OCR text length: {len(ocr_text)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek
            telegram.send_message(chat_id, "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
            analysis_result = deepseek.analyze_text(ocr_text)
            
            if not analysis_result:
                telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            parsed_data = self.parse_analysis_result(analysis_result)
            
            if not parsed_data:
                telegram.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            session_id = f"{chat_id}_{int(time.time())}"
            temp_data_store[session_id] = {
                'parsed_data': parsed_data,
                'chat_id': chat_id,
                'timestamp': time.time()
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.show_confirmation(chat_id, session_id, parsed_data)
            
        except Exception as e:
            logging.error(f"‚ùå Error processing photo: {e}")
            telegram.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    def handle_callback(self, callback):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            chat_id = callback['message']['chat']['id']
            data = callback['data']
            
            if data.startswith('confirm_'):
                session_id = data.replace('confirm_', '')
                self.create_bitrix_task(chat_id, session_id)
            
            elif data.startswith('edit_'):
                session_id = data.replace('edit_', '')
                self.start_editing(chat_id, session_id)
            
            elif data.startswith('field_'):
                parts = data.split('_')
                session_id = parts[1]
                field_name = parts[2]
                self.request_field_edit(chat_id, session_id, field_name)
            
            elif data.startswith('save_'):
                session_id = data.replace('save_', '')
                self.show_confirmation(chat_id, session_id)
                
        except Exception as e:
            logging.error(f"‚ùå Callback error: {e}")
            telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    
    def handle_field_edit(self, chat_id, new_value, editing_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è"""
        try:
            editing_data = temp_data_store[editing_key]
            session_id = editing_data['session_id']
            field_name = editing_data['field_name']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö
            if session_id in temp_data_store:
                temp_data_store[session_id]['parsed_data'][field_name] = new_value
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            del temp_data_store[editing_key]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.show_confirmation(chat_id, session_id)
            
        except Exception as e:
            logging.error(f"‚ùå Field edit error: {e}")
            telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
    
    def show_confirmation(self, chat_id, session_id, parsed_data=None):
        """–ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not parsed_data:
            data = temp_data_store.get(session_id)
            if not data:
                telegram.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
                return
            parsed_data = data['parsed_data']
        
        confirmation_text = (
            f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üè≠ –£—á–∞—Å—Ç–æ–∫: {parsed_data.get('–£—á–∞—Å—Ç–æ–∫', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üîß –ò–∑–¥–µ–ª–∏–µ: {parsed_data.get('–ò–∑–¥–µ–ª–∏–µ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìê –ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞: {parsed_data.get('–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üî¢ –ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è: {parsed_data.get('–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "callback_data": f"confirm_{session_id}"},
                    {"text": "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", "callback_data": f"edit_{session_id}"}
                ]
            ]
        }
        
        telegram.send_message(chat_id, confirmation_text, keyboard)
    
    def start_editing(self, chat_id, session_id):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π"""
        data = temp_data_store.get(session_id)
        if not data:
            telegram.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
            return
        
        parsed_data = data['parsed_data']
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üè≠ –£—á–∞—Å—Ç–æ–∫", "callback_data": f"field_{session_id}_–£—á–∞—Å—Ç–æ–∫"}],
                [{"text": "üîß –ò–∑–¥–µ–ª–∏–µ", "callback_data": f"field_{session_id}_–ò–∑–¥–µ–ª–∏–µ"}],
                [{"text": "üìê –ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞", "callback_data": f"field_{session_id}_–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞"}],
                [{"text": "üî¢ –ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è", "callback_data": f"field_{session_id}_–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è"}],
                [{"text": "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "callback_data": f"save_{session_id}"}]
            ]
        }
        
        telegram.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", keyboard)
    
    def request_field_edit(self, chat_id, session_id, field_name):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
        telegram.send_message(
            chat_id, 
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_name}':"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        temp_data_store[f"editing_{chat_id}"] = {
            'session_id': session_id,
            'field_name': field_name,
            'timestamp': time.time()
        }
    
    def create_bitrix_task(self, chat_id, session_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å"""
        try:
            data = temp_data_store.get(session_id)
            if not data:
                telegram.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
                return
            
            parsed_data = data['parsed_data']
            
            telegram.send_message(chat_id, "üìù –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24...")
            
            bitrix_result = bitrix.send_data(
                parsed_data, 
                chat_id,
                username="telegram_user"
            )
            
            if bitrix_result:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if session_id in temp_data_store:
                    del temp_data_store[session_id]
                
                success_text = (
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"üè≠ –£—á–∞—Å—Ç–æ–∫: {parsed_data.get('–£—á–∞—Å—Ç–æ–∫', '–ù/–î')}\n"
                    f"üîß –ò–∑–¥–µ–ª–∏–µ: {parsed_data.get('–ò–∑–¥–µ–ª–∏–µ', '–ù/–î')}\n"
                    f"üìê –ß–µ—Ä—Ç–µ–∂: {parsed_data.get('–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', '–ù/–î')}\n"
                    f"üî¢ –ù–æ–º–µ—Ä: {parsed_data.get('–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è', '–ù/–î')}"
                )
                telegram.send_message(chat_id, success_text)
            else:
                telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24")
                
        except Exception as e:
            logging.error(f"‚ùå Bitrix task creation error: {e}")
            telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
    
    def parse_analysis_result(self, analysis_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ DeepSeek"""
        try:
            parsed_data = {}
            lines = analysis_text.split('\n')
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                    
                # –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
                if line.startswith('–£—á–∞—Å—Ç–æ–∫:'):
                    parsed_data['–£—á–∞—Å—Ç–æ–∫'] = line.replace('–£—á–∞—Å—Ç–æ–∫:', '').strip()
                elif line.startswith('–ò–∑–¥–µ–ª–∏–µ:'):
                    parsed_data['–ò–∑–¥–µ–ª–∏–µ'] = line.replace('–ò–∑–¥–µ–ª–∏–µ:', '').strip()
                elif line.startswith('–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞:'):
                    parsed_data['–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞'] = line.replace('–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞:', '').strip()
                elif line.startswith('–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è:'):
                    parsed_data['–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è'] = line.replace('–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è:', '').strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not parsed_data.get('–£—á–∞—Å—Ç–æ–∫') or not parsed_data.get('–ò–∑–¥–µ–ª–∏–µ'):
                logging.warning("‚ö†Ô∏è Missing required fields")
                return None
            
            logging.info(f"üìä Parsed data: {parsed_data}")
            return parsed_data
            
        except Exception as e:
            logging.error(f"‚ùå Error parsing analysis result: {e}")
            return None
