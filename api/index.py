from http.server import BaseHTTPRequestHandler
import json
import logging
import os
import requests
from lib.telegram import TelegramService
from lib.ocr import OCRService
from lib.deepseek import DeepSeekService
from lib.bitrix import BitrixService

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
telegram = TelegramService()
ocr = OCRService()
deepseek = DeepSeekService()
bitrix = BitrixService()

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """Health check"""
        if self.path == '/health' or self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "healthy", 
                "service": "telegram-bot",
                "platform": "vercel"
            }
            self.wfile.write(json.dumps(response).encode())
            return
        
        self.send_response(404)
        self.end_headers()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            logging.info(f"üì® Received Telegram update")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–ï–ö–°–¢–ê
                if 'text' in message:
                    text = message.get('text', '')
                    logging.info(f"üí¨ Text from {chat_id}: {text}")
                    
                    response_text = "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã üì∏"
                    telegram.send_message(chat_id, response_text)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–û–¢–û
                elif 'photo' in message:
                    logging.info(f"üì∏ Photo from {chat_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    telegram.send_message(chat_id, "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ...")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                    photo = message['photo'][-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
                    file_id = photo['file_id']
                    image_bytes = telegram.download_file(file_id)
                    
                    if image_bytes:
                        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
                        telegram.send_message(chat_id, "üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
                        ocr_text = ocr.process_image(image_bytes)
                        
                        if ocr_text:
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek
                            telegram.send_message(chat_id, "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
                            parsed_data = deepseek.parse_route_card(ocr_text)
                            
                            if parsed_data:
                                # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å
                                telegram.send_message(chat_id, "üìù –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É...")
                                bitrix_result = bitrix.create_task(parsed_data)
                                
                                if bitrix_result:
                                    telegram.send_message(
                                        chat_id, 
                                        f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                                        f"üè≠ –£—á–∞—Å—Ç–æ–∫: {parsed_data.get('—É—á–∞—Å—Ç–æ–∫', '–ù/–î')}\n"
                                        f"üîß –ò–∑–¥–µ–ª–∏–µ: {parsed_data.get('–∏–∑–¥–µ–ª–∏–µ', '–ù/–î')}"
                                    )
                                else:
                                    telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
                            else:
                                telegram.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                        else:
                            telegram.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ")
                    else:
                        telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK Telegram
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {"status": "ok", "message": "processed"}
            self.wfile.write(json.dumps(response).encode())
            
        except Exception as e:
            logging.error(f"‚ùå Error: {e}")
            self.send_response(200)
            self.end_headers()
