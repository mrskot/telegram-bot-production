from flask import Flask, request, jsonify
import json
import traceback
import os
import sys
import requests

app = Flask(__name__)

# –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–µ—Ä–µ–¥ –ª—é–±—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
print("=" * 50)
print("üöÄ api/index.py –ó–ê–ü–£–©–ï–ù!")
print("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
for key in os.environ:
    if 'TELEGRAM' in key or 'BOT' in key:
        print(f"   {key}: {os.environ[key][:10]}...")
print("=" * 50)

try:
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π —Å–µ—Ä–≤–∏—Å
    print("üü° –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TelegramService...")
    from lib.telegram import TelegramService
    print("‚úÖ TelegramService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = TelegramService()
    print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    print("üîç Traceback:")
    print(traceback.format_exc())
    bot = None

@app.route('/')
def home():
    print("üü° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."

@app.route('/test')
def test():
    print("üü° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /test")
    return jsonify({
        "status": "success", 
        "message": "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "bot_initialized": bot is not None
    })

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞"""
    try:
        if not bot:
            return jsonify({"status": "error", "message": "Bot not initialized"}), 500
            
        webhook_url = f"https://{request.host}/webhook"
        print(f"üü° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {webhook_url}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
        set_webhook_url = f"https://api.telegram.org/bot{bot.token}/setWebhook"
        payload = {
            'url': webhook_url,
            'drop_pending_updates': True
        }
        
        print(f"üü° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: {set_webhook_url}")
        response = requests.post(set_webhook_url, json=payload, timeout=10)
        result = response.json()
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {result}")
        return jsonify({"status": "success", "result": result})
        
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        print(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/delete_webhook', methods=['GET'])
def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        if not bot:
            return jsonify({"status": "error", "message": "Bot not initialized"}), 500
            
        delete_webhook_url = f"https://api.telegram.org/bot{bot.token}/deleteWebhook"
        print(f"üü° –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫: {delete_webhook_url}")
        
        response = requests.post(delete_webhook_url, timeout=10)
        result = response.json()
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {result}")
        return jsonify({"status": "success", "result": result})
        
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/get_webhook_info', methods=['GET'])
def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ"""
    try:
        if not bot:
            return jsonify({"status": "error", "message": "Bot not initialized"}), 500
            
        webhook_info_url = f"https://api.telegram.org/bot{bot.token}/getWebhookInfo"
        print(f"üü° –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ: {webhook_info_url}")
        
        response = requests.post(webhook_info_url, timeout=10)
        result = response.json()
        
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ: {result}")
        return jsonify({"status": "success", "result": result})
        
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    print("=" * 50)
    print("üü° üì® –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê /webhook")
    print(f"üü° –ú–µ—Ç–æ–¥: {request.method}")
    print(f"üü° Headers: {dict(request.headers)}")
    print("=" * 50)
    
    if request.method == 'GET':
        return "‚úÖ Webhook endpoint is ready for POST requests"
    
    if not bot:
        print("üî¥ –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return jsonify({"status": "error", "message": "Bot not initialized"}), 500
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if request.is_json:
            update_data = request.get_json()
        else:
            update_data = request.form.to_dict()
            
        print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(update_data, indent=2, ensure_ascii=False)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        result = bot.handle_webhook(update_data)
        
        print(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return jsonify({"status": "success", "result": result})
        
    except Exception as e:
        print(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í WEBHOOK: {e}")
        print("üîç Traceback:")
        print(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/debug')
def debug():
    print("üü° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /debug")
    return jsonify({
        "status": "success",
        "python_version": sys.version,
        "bot_initialized": bot is not None,
        "environment_keys": [k for k in os.environ.keys() if 'TELEGRAM' in k or 'BOT' in k]
    })

@app.route('/send_test_message', methods=['GET'])
def send_test_message():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if not bot:
            return jsonify({"status": "error", "message": "Bot not initialized"}), 500
            
        # –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π chat_id –¥–ª—è —Ç–µ—Å—Ç–∞
        test_chat_id = request.args.get('chat_id')
        if not test_chat_id:
            return jsonify({"status": "error", "message": "No chat_id provided"}), 400
            
        test_text = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!"
        print(f"üü° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ chat_id: {test_chat_id}")
        
        result = bot.send_message(test_chat_id, test_text)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        return jsonify({"status": "success", "result": result})
        
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    print(f"üî¥ 404 –æ—à–∏–±–∫–∞: {error}")
    return "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

@app.errorhandler(500)
def internal_error(error):
    print(f"üî¥ 500 –æ—à–∏–±–∫–∞: {error}")
    return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

if __name__ == '__main__':
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app.run(debug=True)
